<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
  <script async src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"></script>
  <!-- <script async src="/js/card_section.js"></script> -->
  <script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <!-- <script src="sweetalert2.all.min.js"></script> -->
  <title>Document Home</title>
  <style>
    .card-section {
      padding-top: 1rem;
    }
    .card {
      padding: 1rem;
      margin-bottom: 0.5rem;
    }
    .end-text {
      padding: 1rem;
      margin-bottom: 0.5rem;
    }
    #textarea1 {
      min-height: fit-content;
      height: fit-content;
    }
    .user-info-section {
      display: flex;
      justify-content: space-between;
      /* align-content: center; */
      /* text-align: center; */
    }
    .user-info {
      display: flex;
      /* align-content: center; */
      /* text-align: center; */
      align-items: center;
    }
    a {
      color: #41464b;
      /* outline: none; */
      text-decoration: none;
    }
  </style>
</head>
<body>
  <!-- nav-bar -->
  <nav class="navbar navbar-expand-lg navbar-light bg-light">
    <div class="container-fluid">
      <a class="navbar-brand" href="/">Home</a>
      <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarSupportedContent">
        <ul class="navbar-nav me-auto mb-2 mb-lg-0">
          <li class="nav-item">
            <a class="nav-link active" aria-current="page" href="#">Posts</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="#">Link</a>
          </li>
          <li class="nav-item dropdown">
            <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
              Dropdown
            </a>
            <ul class="dropdown-menu" aria-labelledby="navbarDropdown">
              <li><a class="dropdown-item" href="#">Setting</a></li>
              <li><a class="dropdown-item" href="#">Another action</a></li>
              <li><hr class="dropdown-divider"></li>
              <li><a class="dropdown-item" href="/logout">Log out</a></li>
            </ul>
          </li>
          <li class="nav-item">
            <a class="nav-link disabled">Disabled</a>
          </li>
        </ul>
        <form class="d-flex">
          <input class="form-control me-2" type="search" placeholder="Search" aria-label="Search">
          <button class="btn btn-outline-success" type="submit">Search</button>
        </form>
      </div>
    </div>
  </nav>
  <!-- post section -->
  {{$visited_uid := index .Data "UserID"}}
  {{$self_visit:= index .Data "SelfVisit"}}
  <input type="hidden" name="csrf_token" id="csrf_token" value="{{.CSRFToken}}">
  <input type="hidden" name="visited_uid" id="visited_uid" value="{{$visited_uid}}">
  <input type="hidden" name="self_visit" id="self_visit" value={{$self_visit}}>
  <div class="container">
    <div class="row">
    <div class="col-3">
        <div class="card">
            <div class="card-body" id="user-section">
              <p id="user_name" ></p>
              <p id="description">Description:<br>closed her eyes and then opened them again. What she was seeing just didn't make sense. She shook her head seeing if that would help. It didn't. Although it seemed beyond reality, there was no denying she was witnessing a large formation of alien spaceships filling the sky.</p>
            </div>
          </div>
    </div>
    <div class="col-6" id="center-section">
      <!-- {{$pidlist := index .Data "PIDList"}} -->
      <input type="hidden" name="pidlist" value="{{$pidlist}}">
      <!-- text editor -->
      <!-- <div>
      <form id="post-form" action="" method="post">
        <input type="hidden" name="csrf_token" value="{{.CSRFToken}}">
        <div class="mb-3 post-editor">
          <label for="exampleFormControlTextarea1" class="form-label">Example textarea</label>
          <textarea class='form-control {{with .Form.Errors.Get "first_name"}} is-invalid {{end}}' name="textarea1" id="textarea1" placeholder="Write a new post..." rows="3"></textarea>
        </div>
      </form>
      <button id="post_btn" type="btn" class="btn btn-outline-primary">Post</button>
       </div> -->
      <!-- card-section -->
      <div class="card-section" id="card-section">
        <!-- <div class="card">
          <img src="..." class="card-img-top" alt="...">
          <div class="card-body">
            <p class="card-text">Some quick example text to build on the card title and make up the bulk of the card's content.</p>
          </div>
        </div>
        <div class="card">
          <img src="..." class="card-img-top" alt="...">
          <div class="card-body">
            <p class="card-text">Some quick example text to build on the card title and make up the bulk of the card's content.The bowl was filled with fruit. It seemed to be an overabundance of strawberries, but it also included blueberries, raspberries, grapes, and banana slices. This was the meal Sarah had every morning to start her day since she could remember. Why she decided to add chocolate as an option today was still a bit of a surprise, but she had been in the process of deciding she wanted to change her routine. This was a baby step to begin that start.</p>
          </div>
        </div> -->
      </div>
    </div>
    <div class="col-3"></div>
  </div>
  </div>

  <script>
    // const pidList = {{$pidlist}};//[{{range $pidlist}} {{.}}, {{end}}];
    // console.log(pidList);

    const centerSection = document.getElementById("center-section");
    const cardSection = document.getElementById('card-section');
    const postForm = document.getElementById('post-form');
    const windowHeight = window.innerHeight;
    const pageHeight = document.documentElement.scrollHeight;
    const body = document.body;
    const csrfToken = document.getElementById("csrf_token");

    const visitedUID = document.getElementById("visited_uid");
    const selfVisit = document.getElementById("self_visit");

    const followButton = document.createElement("button");
              

    console.log("visitedUID:", visitedUID.value);
    console.log("selfVisit:", selfVisit.value);
    
    var offset = 0;

    
    const deleteBtn = document.querySelectorAll('delete-btn');
    
    // var httpRequestPost;
    // var httpRequestGet;

    // document.addEventListener("scroll", getRequest);
    console.log(document.documentElement.scrollHeight);
    console.log(document.documentElement.clientHeight);
    // for (; document.documentElement.scrollHeight - document.documentElement.clientHeight == 0; ) {
    //   getRequest();
    // }
    // console.log(cardSection.clientHeight);
    // console.log(document.getElementById("card-section").scrollHeight)
    
    document.body.addEventListener("onload", loadPage)
    document.body.onload = loadPage;
    window.onscroll = function () {
      if ((window.innerHeight + window.scrollY) >= document.body.scrollHeight) {
        getRequest();
        // getRequest();
        // getRequest();
      }
    }

    // getRequest();

    
    const updateBtns = document.querySelectorAll('update-btn');

    console.log("updateBtns length:", updateBtns.length);
    if (updateBtns.length > 0) {
      for (let idx = 0; idx < updateBtns.length; idx++) {
        updateBtns[idx].addEventListener("click", function (){
          // const ul= updateBtns[idx].parentElement;
          // const dropEnd = ul.parentElement;
          // const pid = dropEnd.querySelector("input");

          
            Swal.fire({
              input: 'textarea',
              inputLabel: 'Message',
              inputPlaceholder: 'Type your message here...',
              inputAttributes: {
                'aria-label': 'Type your message here'
              },
              showCancelButton: true
            });

          
          // putRequest(pid)
        });
      }
    }

    function followClick() {
      const data = JSON.stringify({
        "csrf_token": csrfToken.value
      });
      console.log(data);
      const url = 'api/Follow/userid=' + visitedUID.value;
      fetch(url,{
        method:"POST",
        body: data,
      }).then(function (response) {
        return response.json();
      }).then(function (jsonResponse) {
        // Follow success, change button class and innner.text
        // set followButton click listener function to unfollowClick
        console.log(jsonResponse);
        if (jsonResponse.success === true) {
          followButton.setAttribute("class", "btn btn-secondary");
          followButton.innerText = "Followed";
          followButton.removeEventListener("click", followClick);
          followButton.addEventListener("click", unfollowClick);
        }
      })
    }
    function unfollowClick() {
      const data = JSON.stringify({
        "csrf_token": csrfToken.value
      });
      console.log(data);
      const url = 'api/Follow/userid=' + visitedUID.value;
      fetch(url,{
        method:"Delete",
        body: data
      }).then(function (response) {
        return response.json();
      }).then(function (jsonResponse) {
        // Follow success, change button class and innner.text
        // set followButton click listener function to unfollowClick
        console.log(jsonResponse);
        if (jsonResponse.success === true) {
          followButton.setAttribute("class", "btn btn-primary");
          followButton.innerText = "Follow";
          followButton.removeEventListener("click", unfollowClick);
          followButton.addEventListener("click", followClick);
        }
      })
    }


    function loadPage() {
      // load user-info and shows in the first col-3 div in the container.
      
      const userName = document.getElementById("user_name");
      const description = document.getElementById("description");
      // if (selfVisit.value !== 'true') {
      //     const followButton = document.createElement("button");
      //     followButton.setAttribute("type", "button");
      //     // followButton.setAttribute("class", "btn btn-primary");
      //     // followButton.innerText = "Follow";
      //     const userSection = document.getElementById("user-section");
      //     userSection.insertBefore(followButton, description);
      //     // followButton.addEventListener("click",);
      // }
      const url = 'api/User/userid=' + visitedUID.value;
      fetch(url, {
          method: 'GET'
      }).then(function(response) {
          return response.json();
      }).then(function(jsonResponse) {
          console.log(jsonResponse)
          userName.innerText = jsonResponse.firstName + " " + jsonResponse.lastName;
          if (selfVisit.value !== 'true') {
              followButton.setAttribute("type", "button");
              // followButton.setAttribute("class", "btn btn-primary");
              // followButton.innerText = "Follow";
              const userSection = document.getElementById("user-section");
              userSection.insertBefore(followButton, description);
              // followButton.addEventListener("click",);
              if (jsonResponse.followed === true) {
                  followButton.setAttribute("class", "btn btn-secondary");
                  followButton.innerText = "Followed";
                  followButton.addEventListener("click", unfollowClick);
              }else {
                  followButton.setAttribute("class", "btn btn-primary");
                  followButton.innerText = "Follow";
                  followButton.addEventListener("click", followClick);
              }
          }
          
      })
    //   userName.innerText = userInfo.value.firstName + " " + userInfo.value.lastName;

      // if template data VisitSelf is true, add an post card form on the top of
      // the col-6 div in the container.
      if (selfVisit.value === 'true') {
          const postForm = document.createElement('div');
          postForm.innerHTML = `
          <form id="post-form" action="" method="post">
          <input type="hidden" name="csrf_token" id="form_csrf_token" value="">
          <div class="mb-3 post-editor">
          <label for="exampleFormControlTextarea1" class="form-label">Example textarea</label>
          <textarea class='form-control' name="textarea1" id="textarea1" placeholder="Write a new post..." rows="3"></textarea>
          </div>
          </form>
          <button id="post_btn" type="btn" class="btn btn-outline-primary">Post</button>
          `;
          centerSection.insertBefore(postForm, cardSection);
          const formCSRFToken = document.getElementById("form_csrf_token");
          formCSRFToken.value = csrfToken.value;
          const postBtn = document.getElementById("post_btn");
          postBtn.addEventListener("click", postRequest);

    
      }

      // load some cards
      let num = (window.innerHeight - document.body.scrollHeight) / 270;
      for (let i = 0; i < num; i++) {
        console.log(window.innerHeight);
        console.log(document.body.scrollHeight);
        getRequest();
      }
    }

    function getRequest() {
      var httpRequestGet = new XMLHttpRequest();
      httpRequestGet.responseType = 'json';

      if (!httpRequestGet) {
        alert('Giving up :( Cannot create an XMLHTTP instance');
        return false;
      }

      var url = 'api/Card/userid=';
      console.log(url + visitedUID.value.toString() + "&offset=" + offset.toString());
      httpRequestGet.open('GET', url + visitedUID.value + "&offset=" + offset.toString());
      offset += 3;
      httpRequestGet.onreadystatechange = function () {
        addNewPostTail(httpRequestGet);
      }
      httpRequestGet.send();
    }    

    function addNewPostTail(httpRequestGet) {
      // const card = document.createElement('div');
      // card.classList.add('card');
      // const cardBody = document.createElement('div');
      // cardBody.classList.add('card-body');
      // const cardText = document.createElement('p');
      // cardText.classList.add('card-text');
      // cardBody.appendChild(cardText);
      // card.appendChild(cardBody);
      // cardSection.appendChild(card);
      if (httpRequestGet.readyState === XMLHttpRequest.DONE) {
        if (httpRequestGet.status === 200) {
          for (let idx = 0; idx < httpRequestGet.response.length; idx++){
            // if (httpRequestGet.response[idx].content === null) {
            //   return;
            // }
            const card = document.createElement('div');
            card.classList.add('card');
            const cardBody = document.createElement('div');
            cardBody.classList.add('card-body');
            const cardText = document.createElement('p');
            cardText.classList.add('card-text');

            const userInfoSection = document.createElement('div');
            userInfoSection.classList.add('user-info-section');
            const userInfo = document.createElement('div');
            userInfo.classList.add('user-info');
            const userLink = document.createElement('a');
            userLink.href = "http://"
            card.appendChild(userInfoSection);
            userInfoSection.appendChild(userInfo);
            userInfo.appendChild(userLink);
            userLink.innerText = httpRequestGet.response[idx].firstName + " " + httpRequestGet.response[idx].lastName;
            if (httpRequestGet.response[idx].edit === true) {
              const dropEnd = document.createElement('div');
              dropEnd.classList.add('dropend');
              dropEnd.innerHTML = `
                <a class="dropdown-toggle" href="#" role="button" id="dropdownMenuLink" data-bs-toggle="dropdown" aria-expanded="false">||</a>
                <ul class="dropdown-menu">
                  <li class="share-btn"><a class="dropdown-item" href="#">Share</a></li>
                  <li class="update-btn"><a class="dropdown-item" href="#">Edit</a></li>
                  <li class="delete-btn"><a class="dropdown-item" href="#">Delete</a></li>
                </ul>
              `;
              const pid = document.createElement('input')
              pid.type = "hidden";
              pid.value = httpRequestGet.response[idx].pid;
              dropEnd.appendChild(pid);
              const updateBtn = dropEnd.getElementsByClassName("update-btn");
              const deleteBtn = dropEnd.getElementsByClassName("delete-btn");
              
              // console.log(updateBtn[0].innerHTML);
              console.log(deleteBtn[0].innerHTML);
              updateBtn[0].addEventListener("click", function () {
                (async () => {
                  // const { value: text } = 
                  // await 
                  await Swal.fire({
                    input: 'textarea',
                    inputLabel: 'Edit card',
                    inputPlaceholder: 'Type your message here...',
                    inputAttributes: {
                      'aria-label': 'Type your message here'
                    },
                    inputValue: cardText.innerText,
                    confirmButtonText: 'Update',
                    showCancelButton: true,
                    showLoaderOnConfirm: true,
                    preConfirm: (text) => {
                      console.log(text);
                      const data = JSON.stringify({
                        "content": text,
                        "csrf_token": csrfToken.value
                      });
                      console.log(data);
                      const url = 'api/Card/pid=' + pid.value;
                      return fetch(url, {
                        method: 'PUT',
                        headers: { "Content-Type": "application/json" },
                        body: data
                      }).then(response => {
                        return response.json()
                      })
                    }
                  }).then(result => {
                    // console.log(result.value)
                    if (result.isConfirmed){
                      if (result.value.isUpdated === true) {
                        cardText.innerText = result.value.content;
                        swal.fire({
                          title:'Update success',
                          icon:'success'
                        })
                      } else {
                        swal.fire({
                          title:'Update fail',
                          text:'try again later',
                          icon:'warning'
                        })
                      }
                    }
                  })

                })()
              });
              deleteBtn[0].addEventListener("click", function () {
                (async () => {
                  await Swal.fire({
                    title: 'Are you sure?',
                    text: "You won't be able to revert this!",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, delete it!',
                    preConfirm: () => {
                      const data = JSON.stringify({
                        "csrf_token": csrfToken.value
                      });
                      console.log(data);
                      const url = 'api/Card/pid=' + pid.value;
                      return fetch(url, {
                        method: 'DELETE',
                        headers: { "Content-Type": "application/json" },
                        body: data
                      }).then(response => {
                        return response.json()
                      })
                    }
                  }).then((result) => {
                    if (result.isConfirmed) {
                      if (result.value.isDeleted === true) {
                        card.remove();
                        Swal.fire(
                          'Deleted!',
                          'Your file has been deleted.',
                          'success'
                        )
                      }
                    }
                  })
                })()
              });
              userInfoSection.appendChild(dropEnd);
            }
            
            
            // userInfo.innerHTML = '<a href="http://" target="_self" rel="noopener noreferrer">Test User 1: Roger Luis</a>';

            // cardText.innerHTML = httpRequestGet.response.content;
            
            cardSection.appendChild(card);
            cardBody.appendChild(cardText);
            card.appendChild(cardBody);
            cardText.innerText = httpRequestGet.response[idx].content;

            
            
            if (httpRequestGet.response[idx].end === true) {
              window.onscroll = function() {}
              const endText = document.createElement('div');
              endText.classList.add("end-text");
              endText.innerHTML = "<p>No more cards can be loaded...<br>See more cards with others or reload after.</p>";
              cardSection.appendChild(endText);
            }

            // console.log(httpRequestGet.response[idx].content);
          }
          
          // alert(httpRequest.responseText);
        } else {
          alert('There was a problem with the request.');
        }
      } 
    }


    function postRequest() {
      var httpRequestPost = new XMLHttpRequest();
      httpRequestPost.responseType = 'json';

      if (!httpRequestPost) {
        alert('Giving up :( Cannot create an XMLHTTP instance');
        return false;
      }

      var formData = new FormData(postForm);
      console.log(formData.get("textarea1"));
      console.log(formData.get("csrf_token"));
      
      // formData.append("csrf_token", {{.CSRFToken}});
      httpRequestPost.open('POST', 'api/Card');
      httpRequestPost.onreadystatechange = function () {
        addNewPostHead(httpRequestPost);
      }
      // httpRequest.onreadystatechange = addNewPost;
      // httpRequest.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
      httpRequestPost.send(formData);
    }

    function addNewPostHead(httpRequestPost) {

      if (httpRequestPost.readyState === XMLHttpRequest.DONE) {
        if (httpRequestPost.status === 200) {
          const card = document.createElement('div');
          card.classList.add('card');
          const cardBody = document.createElement('div');
          cardBody.classList.add('card-body');
          const cardText = document.createElement('p');
          cardText.classList.add('card-text');
          
          cardText.innerText = httpRequestPost.response.content;
          cardBody.appendChild(cardText);
          card.appendChild(cardBody);
          cardSection.insertBefore(card, cardSection.firstChild);

          console.log(httpRequestPost.response.content);
          postForm.reset();
          // alert(httpRequest.responseText);
        } else {
          alert('There was a problem with the request.');
        }
      } 
      
    }
    
    function putRequest(pid) {
      var httpRequestPut = new XMLHttpRequest();
      httpRequestPut.responseType = 'json';

      if (!httpRequestPut) {
        alert('Giving up :( Cannot create an XMLHTTP instance');
        return false;
      }

      var formData = new FormData(postForm);
      console.log(formData.get("textarea1"));
      console.log(formData.get("csrf_token"));
      
      // formData.append("csrf_token", {{.CSRFToken}});
      var url = 'api/Card/pid='
      httpRequestPost.open('PUT', url + pid.value);
      httpRequestPost.onreadystatechange = function () {
        addNewPostHead(httpRequestPut);
      }
      // httpRequest.onreadystatechange = addNewPost;
      // httpRequest.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
      httpRequestPost.send(formData);
    }

    function deleteRequest(pid) {
      var httpRequestGet = new XMLHttpRequest();
      httpRequestGet.responseType = 'json';

      if (!httpRequestGet) {
        alert('Giving up :( Cannot create an XMLHTTP instance');
        return false;
      }

      var url = 'api/Card/pid=';

      httpRequestGet.open('GET', url + pid);
      offset += 3;
      httpRequestGet.onreadystatechange = function () {
        addNewPostTail(httpRequestGet);
      }
      httpRequestGet.send();
    }    


    // getRequest();
    // console.log(window.innerHeight);
    // console.log(window.scrollY);
    // console.log(document.body.scrollHeight);
    // // console.log(document.documentElement.scrollHeight);
    // // console.log(document.documentElement.clientHeight);
    // // console.log(document.getElementById("card-section").clientHeight)
    // getRequest();
    // console.log(document.documentElement.scrollHeight);
    // console.log(document.documentElement.clientHeight);
    // console.log(document.getElementById("card-section").clientHeight)
    // getRequest();
    // console.log(document.documentElement.scrollHeight);
    // console.log(document.documentElement.clientHeight);
    // console.log(document.getElementById("card-section").clientHeight)
    // getRequest();
    // console.log(document.documentElement.scrollHeight);
    // console.log(document.documentElement.clientHeight);
    // console.log(cardSection.clientHeight);
    // getRequest();
    // // console.log(document.documentElement.scrollHeight);
    // // console.log(document.documentElement.clientHeight);
    // // console.log(cardSection.clientHeight);
    // getRequest();
    // console.log(window.innerHeight);
    // console.log(window.scrollY);
    // console.log(document.body.scrollHeight);
    // console.log(document.documentElement.scrollHeight);
    // console.log(document.documentElement.clientHeight);
    // console.log(cardSection.clientHeight);
  </script>
</body>
</html>